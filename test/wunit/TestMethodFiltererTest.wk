module wunit;

import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeLambdaType;
import treflect.WakeVarDecl;
import treflect.ReflectionProvider;
import treflect.Annotation;
import wunit.Asserts;
import wunit.TestMethodFilterer;

@TestClass
every TestMethodFiltererTest is:

	needs ReflectionProvider, TestMethodFilterer;

	@Test
	testNoAnnotationsIsNot(Asserts) {
		var WakeType from ReflectionProvider;
		WakeType.WakeLambdaType = WakeLambdaType from ReflectionProvider;
		var WakeVarDecl(WakeType) from ReflectionProvider;
		var WakeProperty(WakeVarDecl) from ReflectionProvider;
		WakeProperty.name = "testBlah()";
		Asserts.that(TestMethodFilterer.isProperty(WakeProperty)ATestMethod())Equals(false);
	}

	@Test
	testNoAnnotationsIs(Asserts) {
		var WakeType from ReflectionProvider;
		WakeType.WakeLambdaType = WakeLambdaType from ReflectionProvider;
		var WakeVarDecl(WakeType) from ReflectionProvider;
		var WakeProperty(WakeVarDecl) from ReflectionProvider;

		WakeProperty.name = "Banana";
		WakeProperty.Annotation[].push(Annotation("Test") from ReflectionProvider);
		Asserts.that(TestMethodFilterer.isProperty(WakeProperty)ATestMethod())Equals(true);
	}
