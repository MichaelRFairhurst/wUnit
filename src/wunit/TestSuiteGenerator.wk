module wunit;

import std.Map;
import io.File;
import treflect.WakeClass;
import treflect.WakeProperty;
import wunit.TestMethodFilterer;

#>
# will generate a file which looks like
#
# every TestSuite is:
# 	needs YourFirstClassTest, YourSecondClassTest, YourThirdClassTest, TestResultReporter;
#	provides Asserts;
#	tests() {
#		var Asserts from this;
#		TestResultReporter.begin("YourFirstClassTest", "testFirstMethod");
#		YourFirstClassTest.testFirstMethod(Asserts);
#		TestResultReporter.end(Asserts);
#		// moar of these
#		TestResultReporter.report();
#	}
##
every TestSuiteGenerator is:

	needs TestMethodFilterer;

	write(WakeClass[])To(File) {
		foreach WakeClass[] {
			File.write("import ");
			if WakeClass.modulename != "" then File.write(WakeClass.modulename + ".");
			File.write(WakeClass.classname + ";");
		}

		File.write("import std.System;\nimport wunit.TestResultReporter;\nimport wunit.Asserts;\nimport io.Printer;\n");
		File.write("every TestSuite is:\n\tneeds\n");

		foreach WakeClass[] {
			File.write("\t\t");
			File.write(WakeClass.classname);
			File.write(",\n");
		}

		File.write("\t\tTestResultReporter;\n\tprovides Asserts, Printer;\n\n\ttests() {");
		File.write("var Asserts from this;");

		foreach WakeClass[] do
		foreach WakeClass.properties.getValues() {
			if !TestMethodFilterer.isProperty(WakeProperty)ATestMethod() then continue;
			File.write("\n\t\tAsserts = Asserts from this;");
			File.write("\n\t\tTestResultReporter.begin(\"" + WakeClass.classname + "\", \"" + WakeProperty.name + "\");\n\t\t");
			File.write(WakeClass.classname + "." + WakeProperty.name + ";");
			File.write("\n\t\tTestResultReporter.end(Asserts);");
		}

		File.write("\n\t\tTestResultReporter.report();\n\t}");
	}
