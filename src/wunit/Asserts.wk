module wunit;

#>
# This takes assertions and prints failures, and then reports
# at test end if something went wrong. At that point it should
# be discarded and you should use a new one.
##
every Asserts is:

	with Bool hasfailed = false;
	with Text[] failures = [];
	with Num assertions = 0;

	fail(Text) {
		hasfailed = true;
		failures.push(Text);
	}

	{T} that(actual T)Equals(T)Otherwise(error Text) {
		if(T != actual) {
			fail(error);
		}
	}

	that(actual Bool)Equals(Bool) {
		assertions += 1;
		if(Bool != actual) {
			var $Text = "Failed asserting that ";
			if(Bool) $Text = $Text + "true is equal to actual false";
			else $Text = $Text + "false is equal to actual true";
			fail($Text);
		}
	}

	isFalse(Bool) {
		that(Bool)Equals(false);
	}

	isTrue(Bool) {
		that(Bool)Equals(true);
	}

	that(actual Num)Equals(Num) {
		assertions += 1;
		if(Num != actual) {
			fail("Failed asserting that " + Num.toString()
				 + " is equal to actual " + actual.toString());
		}
	}
	
	that(actual Num[])Equals(Num[]) {
		var Num i = 0;
		var Bool pass = true;
		assertions +=1;
		if (actual.getSize() != Num[].getSize()) {
			pass = false;
		} else {
			for (i = 0; i< actual.getSize(); i+=1) {
				if (actual[i] != Num[i]) {
					pass = false;
				}
			}
		}
		if (!pass) {
			var Text[] actText = [];
			var Text[] = [];
			for (i=0; i<actual.getSize(); i+=1) {
				actText.push(actual[i].toString());
			}
			for (i=0; i<Num[].getSize(); i+=1) {
				Text[].push(Num[i].toString());
			}
			
			fail("failed to assert that actual [" + ", ".join(actText) + 
				 "] is equal to [" + ", ".join(Text[]) + "]");
		}
	}
	
	that(actual Text[])Equals(Text[]) {
		var Num i = 0;
		var Bool pass = true;
		assertions +=1;
		if (actual.getSize() != Text[].getSize()) {
			pass = false;
		} else {
			for (i = 0; i< actual.getSize(); i+=1) {
				if (actual[i] != Text[i]) {
					pass = false;
				}
			}
		}
		if (!pass) {
			fail("failed to assert that actual [" + ", ".join(actual) + 
				 "] is equal to [" + ", ".join(Text[]) + "]");
		}
	}
	
	that(actual Num)IsGT(Num) {
		assertions +=1;
		if(actual <= Num) {
			fail("Failed asserting that actual " + actual.toString()
				 + " is greater than " + Num.toString());
		}
	}
	
	that(actual Num)IsGT(Num)Otherwise(Text) {
		assertions +=1;
		if(actual <= Num) {
			fail(Text);
		}
	}
	
	that(actual Num)IsGTE(Num) {
		assertions +=1;
		if(actual < Num) {
			fail("Failed asserting that actual " + actual.toString()
				 + " is greater than or equal to " + Num.toString());
		}
	}
	
	that(actual Num)IsGTE(Num)Otherwise(Text) {
		assertions +=1;
		if(actual < Num) {
			fail(Text);
		}
	}
	
	that(actual Num)IsLT(Num) {
		assertions +=1;
		if(actual >= Num) {
			fail("Failed asserting that actual " + actual.toString() 
				 + " is less than " + Num.toString());
		}
	}
	
	that(actual Num)IsLT(Num)Otherwise(Text) {
		assertions +=1;
		if(actual >= Num) {
			fail(Text);
		}
	}
	
	that(actual Num)IsLTE(Num) {
		assertions +=1;
		if(actual > Num) {
			fail("Failed asserting that actual " + actual.toString()
				 + " is less than or equal to " + Num.toString());
		}
	}
	
	that(actual Num)IsLTE(Num)Otherwise(Text) {
		assertions +=1;
		if(actual > Num) {
			fail(Text);
		}
	}

	that(actual Text)Equals(Text) {
		assertions += 1;
		if(Text != actual) {
			fail("Failed asserting that " + Text + " is equal to actual " + actual);
		}
	}

	#>
	# Assert true
	##
	that(Bool) {
		assertions += 1;
		if(!Bool) fail("Failed an assertion");
	}

	#>
	# This is only for until we can provide and then
	# watch an ErrorCounter instance.
	##
	Bool -- hasFailed() {
		return hasfailed;
	}

	#>
	# This is only for until we can provide and then
	# watch an ErrorCounter instance.
	##
	Bool -- allPassed() {
		return !hasfailed;
	}

	Text[] -- getFailureTexts() {
		return failures;
	}

	Num -- getAssertions() {
		return assertions;
	}
